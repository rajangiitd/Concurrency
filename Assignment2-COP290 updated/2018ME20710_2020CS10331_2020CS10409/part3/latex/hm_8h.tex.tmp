\hypertarget{hm_8h}{}\doxysection{include/hm.h File Reference}
\label{hm_8h}\index{include/hm.h@{include/hm.h}}


This header file contains the declarations of functions and structures related to hashmap.  


{\ttfamily \#include \char`\"{}mythread.\+h\char`\"{}}\newline
{\ttfamily \#include \char`\"{}list.\+h\char`\"{}}\newline
{\ttfamily \#include $<$string.\+h$>$}\newline
Include dependency graph for hm.\+h\+:
% FIG 0
\doxysubsection*{Classes}
\begin{DoxyCompactItemize}
\item 
struct \mbox{\hyperlink{structhashmap__element__s}{hashmap\+\_\+element\+\_\+s}}
\begin{DoxyCompactList}\small\item\em This structure contains the key and value pair of hashmap. \end{DoxyCompactList}\item 
struct \mbox{\hyperlink{structhashmap__s}{hashmap\+\_\+s}}
\begin{DoxyCompactList}\small\item\em This structure defines the hashmap. \end{DoxyCompactList}\end{DoxyCompactItemize}
\doxysubsection*{Macros}
\begin{DoxyCompactItemize}
\item 
\mbox{\Hypertarget{hm_8h_a11d818f14508b076eda0cfe98640b7ae}\label{hm_8h_a11d818f14508b076eda0cfe98640b7ae}} 
\#define {\bfseries SZ}~4096
\end{DoxyCompactItemize}
\doxysubsection*{Functions}
\begin{DoxyCompactItemize}
\item 
int \mbox{\hyperlink{hm_8h_a4daf13745d2c7e59baf9124b0cd98d46}{hashmap\+\_\+create}} (struct \mbox{\hyperlink{structhashmap__s}{hashmap\+\_\+s}} $\ast$const out\+\_\+hashmap)
\begin{DoxyCompactList}\small\item\em Initializes the given hashmap with SZ number of linked lists and locks. \end{DoxyCompactList}\item 
int \mbox{\hyperlink{hm_8h_ae91dcb3550855f201bc443c1635080fb}{hashmap\+\_\+put}} (struct \mbox{\hyperlink{structhashmap__s}{hashmap\+\_\+s}} $\ast$const hashmap, const char $\ast$key, void $\ast$data)
\begin{DoxyCompactList}\small\item\em Puts the given key-\/value pair in the hashmap. \end{DoxyCompactList}\item 
void $\ast$ \mbox{\hyperlink{hm_8h_a051e652a5ba8cd04fefbb15c75b0cbcb}{hashmap\+\_\+get}} (struct \mbox{\hyperlink{structhashmap__s}{hashmap\+\_\+s}} $\ast$const hashmap, const char $\ast$key)
\begin{DoxyCompactList}\small\item\em Fetches the value of the given key from the hashmap. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{hm_8h_ac8294242702e5e43d6a1698cb447c982}{hashmap\+\_\+iterator}} (struct \mbox{\hyperlink{structhashmap__s}{hashmap\+\_\+s}} $\ast$const hashmap, int($\ast$f)(struct \mbox{\hyperlink{structhashmap__element__s}{hashmap\+\_\+element\+\_\+s}} $\ast$const))
\begin{DoxyCompactList}\small\item\em Iterates over each key-\/value pair in the hashmap and applies the given function on them. \end{DoxyCompactList}\item 
int \mbox{\hyperlink{hm_8h_a50bf8746ced6f16c08b02594b508ebe0}{acquire\+\_\+bucket}} (struct \mbox{\hyperlink{structhashmap__s}{hashmap\+\_\+s}} $\ast$const hashmap, const char $\ast$key)
\begin{DoxyCompactList}\small\item\em Acquires lock on the list-\/slot corresponding to the given key in the hashmap. \end{DoxyCompactList}\item 
int \mbox{\hyperlink{hm_8h_a9d55e477ff997273d8087a3cd31a741f}{release\+\_\+bucket}} (struct \mbox{\hyperlink{structhashmap__s}{hashmap\+\_\+s}} $\ast$const hashmap, const char $\ast$key)
\begin{DoxyCompactList}\small\item\em Releases the lock acquired on the linked list corresponding to the given key in the hashmap. \end{DoxyCompactList}\end{DoxyCompactItemize}


\doxysubsection{Detailed Description}
This header file contains the declarations of functions and structures related to hashmap. 



\doxysubsection{Function Documentation}
\mbox{\Hypertarget{hm_8h_a50bf8746ced6f16c08b02594b508ebe0}\label{hm_8h_a50bf8746ced6f16c08b02594b508ebe0}} 
\index{hm.h@{hm.h}!acquire\_bucket@{acquire\_bucket}}
\index{acquire\_bucket@{acquire\_bucket}!hm.h@{hm.h}}
\doxysubsubsection{\texorpdfstring{acquire\_bucket()}{acquire\_bucket()}}
{\footnotesize\ttfamily int acquire\+\_\+bucket (\begin{DoxyParamCaption}\item[{struct \mbox{\hyperlink{structhashmap__s}{hashmap\+\_\+s}} $\ast$const}]{hashmap,  }\item[{const char $\ast$}]{key }\end{DoxyParamCaption})}



Acquires lock on the list-\/slot corresponding to the given key in the hashmap. 


\begin{DoxyParams}{Parameters}
{\em hashmap} & The hashmap containing the list of locks. \\
\hline
{\em key} & The key whose lock we want to store. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
int 0 on successful locking, -\/1 on failure. 
\end{DoxyReturn}
\mbox{\Hypertarget{hm_8h_a4daf13745d2c7e59baf9124b0cd98d46}\label{hm_8h_a4daf13745d2c7e59baf9124b0cd98d46}} 
\index{hm.h@{hm.h}!hashmap\_create@{hashmap\_create}}
\index{hashmap\_create@{hashmap\_create}!hm.h@{hm.h}}
\doxysubsubsection{\texorpdfstring{hashmap\_create()}{hashmap\_create()}}
{\footnotesize\ttfamily int hashmap\+\_\+create (\begin{DoxyParamCaption}\item[{struct \mbox{\hyperlink{structhashmap__s}{hashmap\+\_\+s}} $\ast$const}]{out\+\_\+hashmap }\end{DoxyParamCaption})}



Initializes the given hashmap with SZ number of linked lists and locks. 


\begin{DoxyParams}{Parameters}
{\em out\+\_\+hashmap} & its the pointer to hashmap, which is to be initialized. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
int 0 on successful initialization, -\/1 on failure. 
\end{DoxyReturn}
\mbox{\Hypertarget{hm_8h_a051e652a5ba8cd04fefbb15c75b0cbcb}\label{hm_8h_a051e652a5ba8cd04fefbb15c75b0cbcb}} 
\index{hm.h@{hm.h}!hashmap\_get@{hashmap\_get}}
\index{hashmap\_get@{hashmap\_get}!hm.h@{hm.h}}
\doxysubsubsection{\texorpdfstring{hashmap\_get()}{hashmap\_get()}}
{\footnotesize\ttfamily void$\ast$ hashmap\+\_\+get (\begin{DoxyParamCaption}\item[{struct \mbox{\hyperlink{structhashmap__s}{hashmap\+\_\+s}} $\ast$const}]{hashmap,  }\item[{const char $\ast$}]{key }\end{DoxyParamCaption})}



Fetches the value of the given key from the hashmap. 


\begin{DoxyParams}{Parameters}
{\em hashmap} & Pointer to hashmap from which the value is to be fetched. \\
\hline
{\em key} & The key whose value is to be fetched. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
void$\ast$ The value of the key-\/value pair. Returns NULL if the key is not found in the hashmap. 
\end{DoxyReturn}
\mbox{\Hypertarget{hm_8h_ac8294242702e5e43d6a1698cb447c982}\label{hm_8h_ac8294242702e5e43d6a1698cb447c982}} 
\index{hm.h@{hm.h}!hashmap\_iterator@{hashmap\_iterator}}
\index{hashmap\_iterator@{hashmap\_iterator}!hm.h@{hm.h}}
\doxysubsubsection{\texorpdfstring{hashmap\_iterator()}{hashmap\_iterator()}}
{\footnotesize\ttfamily void hashmap\+\_\+iterator (\begin{DoxyParamCaption}\item[{struct \mbox{\hyperlink{structhashmap__s}{hashmap\+\_\+s}} $\ast$const}]{hashmap,  }\item[{int($\ast$)(struct \mbox{\hyperlink{structhashmap__element__s}{hashmap\+\_\+element\+\_\+s}} $\ast$const)}]{f }\end{DoxyParamCaption})}



Iterates over each key-\/value pair in the hashmap and applies the given function on them. 


\begin{DoxyParams}{Parameters}
{\em hashmap} & The hashmap over which the iteration is to be done. \\
\hline
{\em f} & The function to be applied on each key-\/value pair. \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{hm_8h_ae91dcb3550855f201bc443c1635080fb}\label{hm_8h_ae91dcb3550855f201bc443c1635080fb}} 
\index{hm.h@{hm.h}!hashmap\_put@{hashmap\_put}}
\index{hashmap\_put@{hashmap\_put}!hm.h@{hm.h}}
\doxysubsubsection{\texorpdfstring{hashmap\_put()}{hashmap\_put()}}
{\footnotesize\ttfamily int hashmap\+\_\+put (\begin{DoxyParamCaption}\item[{struct \mbox{\hyperlink{structhashmap__s}{hashmap\+\_\+s}} $\ast$const}]{hashmap,  }\item[{const char $\ast$}]{key,  }\item[{void $\ast$}]{data }\end{DoxyParamCaption})}



Puts the given key-\/value pair in the hashmap. 


\begin{DoxyParams}{Parameters}
{\em hashmap} & The hashmap in which the key-\/value pair is to be inserted. \\
\hline
{\em key} & The key of the pair. \\
\hline
{\em data} & The value of the pair. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
int 0 on successful insertion, -\/1 on failure. 
\end{DoxyReturn}
\mbox{\Hypertarget{hm_8h_a9d55e477ff997273d8087a3cd31a741f}\label{hm_8h_a9d55e477ff997273d8087a3cd31a741f}} 
\index{hm.h@{hm.h}!release\_bucket@{release\_bucket}}
\index{release\_bucket@{release\_bucket}!hm.h@{hm.h}}
\doxysubsubsection{\texorpdfstring{release\_bucket()}{release\_bucket()}}
{\footnotesize\ttfamily int release\+\_\+bucket (\begin{DoxyParamCaption}\item[{struct \mbox{\hyperlink{structhashmap__s}{hashmap\+\_\+s}} $\ast$const}]{hashmap,  }\item[{const char $\ast$}]{key }\end{DoxyParamCaption})}



Releases the lock acquired on the linked list corresponding to the given key in the hashmap. 


\begin{DoxyParams}{Parameters}
{\em hashmap} & The hashmap containing the linked list. \\
\hline
{\em key} & The key whose linked list lock is to be released. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
int 0 
\end{DoxyReturn}
